---
title: 'Learn Coding'
author: 'ale66'
format: 
  revealjs:
    footer: '[github.com/ale66/learn-coding](https://github.com/ale66/learn-coding)&nbsp;&nbsp;&nbsp;'
    theme: [moon]
    preview-links: auto
    chalkboard: 
      boardmarker-width: 2
from: markdown+emoji
execute:
  echo: true
---

# Lambda etc.


---

## mapping function on sequences

```python
my_values = [1, 2, 3, 4, 5]
```

Compute the squares of the first five non-zero natural numbers

```python
l = len(my_values)

squared_values = []

for i in range(l):
    s = my_values[i]**2

    squared_values.append(s)

print(squared_values)

[1, 4, 9, 16, 25]
```


---

Compute the squares of those integers inside `my_values`

```python
squared_values = list()

for val in my_values:
    squared_values.append(val**2)

print(squared_values)

[1, 4, 9, 16, 25]
```

A local, *list processing* activity


## Functors

```python
def my_square(base: int)->int:

    return base**2
```

here `my_square` is a *functor:* the name of the function itself


---

## Mapping functions to lists

Given a function name, we can build an iterable 

that will return the results of applying such function to a given list (mostly)

```python
my_iterable = map(my_square, my_list)
```

We 'query' `my_iteable` we get a sequence with 1, 4, 9 etc.

. . .

```python
my_iterable = map(my_square, my_list)

for el in my_iterable:
    print(el)
```


---

Maps can be easily *materialised* into proper lists

```python
# a map object needs to be wrapped into a data structure
list(map(my_square, my_values))

[1, 4, 9, 16, 25]
```

Essentially, we are pushing a (very standard) `for` cycle 

down into the Python runtime management


# List comprehensions


---

Define lists by the properties of their members, not by explict membership

Styles:

- *extensional:* name the items that make up the list

- *intensional:* give the formula/condition that items must satisfy to be into the list

In Mathematics:

$\{1, 4, 9, 16, 25\}\ =\ \{x\ :\ \exists y\: \in\: {\cal N}. x = y^2 \wedge 0<y \leq 5\}$


---

list comprehension brings list definition closer to natural language specification

```python
extensional = [1, 2, 3, 4, 5]

# create a new list
intensional = [x**2 for x in extensional]
```

A shorter notation, closer to Mathematics

(Data Science code tends to avoid nesting of `for` and `while` cycles)


---

## Examples

with strings, looking for names beginning by 'A'

```python
names = ['Alessandro','Alberto', 'Erin', 'Nicola']

A_names = [n for n in names if n[0] == 'A']

['Alessandro', 'Alberto']
```


---

List comprehension can be nested, iterating twice in the same line of code

Here we look for names containing 'o'

``` python
o_in_name = [n for n in names for ch in n if ch == 'o']

['Alessandro', 'Alberto', 'Nicola']
```

this nested list comprehension 'saves' us from two nested cycles


# lambda definitions


---

## Traditional function definition

Example: compute the $\mathrm{V}_{\circ} = \frac{4}{3}\pi r^3$ formula from school

```python
def my_vol(radius: int) -> float:
    '''Traditional function definition 
       to compute the volume of a sphere'''

    import math

    volume = 4/3 * math.pi * radius**3

    return volume
```

`my_vol()` can be applied anywhere, and several times.


But for a one-time application, possibly deep down the code, 
the  `my_vol` functor may not be needed after all


---

## In-line, anonymous functions

There is no functor, the name of the function is the function definition itself

```python
lambda x: x**2
```

- `lambda` defines the input 

- the output is implicit with the evaluation of the formula`

```python
(lambda x: x**2)(3)
```

will return (or be substituted with) 9.

Look at the (non-) differences:

```python
print(my_square(3))

print((lambda x: x**2)(3))
```


---

## mapping lambdas

The intended application of lambdas

```python
my_values = [1, 2, 3, 4, 5]

new_squares = map(lambda x: x**2, my_values)
```

maps the lambda definition onto each element of the list

n.b. `new_squares` is an iterator, not a real list


---

## putting it all together

```python
list(map(lambda x: x**2, my_values))
```

makes the results into a list. 

```python
new_squares = map(lambda x: x**2, my_values)

print(list(new_squares))
```


---

compare the lambda mapping to non-lambda solutions for succintness

```python
def allSquares(input_list: list) -> list:
    '''Squares all values of a given list'''

    squares = list()

    for el in input_list:
        squares.append(el**2)

    return squares

print(allSquares(my_values))
```


# Default and variable args


---

Normally, argument passing is positional:

$\log_{10} 1000=3$

$\log_2 1024=10$

```python
def my_log(base: float, exponent: float)->float:
    ''' a wrap around the standard log function'''
    import math

    return math.log(base, exponent)

my_log(1000, 10)
my_log(1024, 2)
3
10
```


---

## Great flexibility

P. functions allow calls with a variable number of parameters

Example: by *log* often the logarithm in base 10 is intended:

we save time and have better clarity by 

- assuming that 10 is the default base
   
- allow calls like *mylog(1000)*


__Rule:__ positional argument first, then arguments with default 



## default values

Assumed values are described in the `def`

Positional argument must be defined before default argument

```python
def mylog(argument, base = 10):
    import math

    return math.log(argument, base)
```

```python
print(mylog(1000))

3

print(mylog(1024))

3.0103
```

Note: for `numpy` the default base is $e$.


---

## Inspecting the passed values

A function can examine the values received with the call and decide a course of action


```python
def myfunc(*args):
    ''' Study the received values '''

    for a in args:
        print(a)
```


# Self study with data challenges


---


![](./imgs/spectator.png)


can you [get fresh data](https://data.spectator.co.uk/category/energy) and display it?





