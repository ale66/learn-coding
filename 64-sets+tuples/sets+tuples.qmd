---
title: 'Learn Web'
author: 'ale66'
format: 
  revealjs:
    footer: '[github.com/ale66/learn-web](https://github.com/ale66/learn-web)&nbsp;&nbsp;&nbsp;'
    theme: [moon]
    preview-links: auto
    chalkboard: 
      boardmarker-width: 2
    mermaid:
      theme: forest
      fontSize: 12
from: markdown+emoji
execute:
  echo: true
---

# Sets

* Sets are constructed from a sequence.
* Sets  __cannot__  have duplicated values
  * There are usually used to build sequence of unique items (e.g., set of identifiers such as IDs etc.).

```python
my_list = ['Stelios', 'Tom', 'Tom', 'Stelios', 'Claudia']

my_set = set(my_list)

print(list(my_set))

# the set includes only the unique elements!
['Stelios', 'Tom', 'Claudia']
```

---


## Sets

:::: {.columns}

::: {.column width='40%'}

ideal when we need to remove duplicated values

also ideal for *logical* operations

__duplicates are eliminated__

:::

::: {.column width='35%'}

```python
a = set([1, 2, 3, 4])

b = set([3, 4, 5, 6])

a.intersection(b)
set([3, 4])
```

```python
c = a.intersection(b)

c.issubset(a)
True
```

```python
a.issubset(b)
False
```

```python
a.difference(b)

# will  return
set([1,2,5,6])
```
:::

::: {.column width='25%'}

![](./imgs/union-intersection.png)
:::

::::


---


## Sets: Basic operations

Create an empty set

Iterate over a set and print elements

```python
#Create a new empty set
empty_set = set()

#Create a non empty set
aset = set([0, 1, 2, 3, 4])

#Create a set

num_set = set([0, 1, 2, 3, 4, 5])

for element in num_set:
  print(element)
```

---


## Sets: Basic operations cont'd

Add/remove data from a set


```python
color_set = set()	 

color_set.add('Red')

#Add multiple items
color_set.update(['Blue', 'Green'])

# remove the last element
color_set.pop()
```


---

## Sets: more basic operations

:::: {.columns}

::: {.column width='60%'}

```python
x = set(['green', 'blue'])

y = set(['blue', 'yellow'])

z  = x & y		# or x.intersection(y)
```

```python
x = set(['green', 'blue'])

y = set(['blue', 'yellow'])

z = x | y		# or x.union(y)
```

:::

::: {.column width='40%'}

```python
'green', 'blue', 'yellow'
```

:::

::::

. . .

Cardinality

```python
colors = set(['green', 'blue'])

print(len(colors))
```


---

## Quiz 2: true or false?

:::: {.columns}

::: {.column width='60%'}

* Sets allow duplicated values
  
* Sets are unordered

* Sets are not indexed

:::

::: {.column width='40%'}

![](./imgs/timer.gif)

:::

::::


---

## Solutions!


* Sets allow duplicated values
  * False

* Sets are unordered
  * True
  
* Sets are not indexed
  * True


---

## Summary 

Duplicates are eliminated

no ordering

no support for indexing


---

## Quiz 3!

:::: {.columns}

::: {.column width='20%'}

Will it print True or False?

![](./imgs/timer.gif)

:::

::: {.column width='45%'}

```python
x = set(['Agatha Christie', 
         'J.R.R. Tolkien'])

y = set(['J.R.R. Tolkien', 
         'Virginia Woolf'])

z = set(['J.R.R. Tolkien'])
```

:::

::: {.column width='35%'}

```python
print(x.issubset(y))
```

```python
print(y. issuperset(x))
```

```python
print(z.issubset)
```

```python
print(y.issuperset(z))
```
:::

::::

---

# Solution


:::: {.columns}

::: {.column width='20%'}

Will it print True or False?

![](./imgs/timer.gif)

:::

::: {.column width='45%'}

```python
x = set(['Agatha Christie', 
         'J.R.R. Tolkien'])

y = set(['J.R.R. Tolkien', 
         'Virginia Woolf'])

z = set(['J.R.R. Tolkien'])
```

:::

::: {.column width='35%'}

```python
print(x.issubset(y))
False
```

```python
print(y. issuperset(x))
False
```

```python
print(z.issubset)
True
```

```python
print(y.issuperset(z))
True
```
:::

::::


---

# Tuples


---

A data structure similar to lists

Main difference: tuples are *immutable*

Their application is faster than lists 

```python
mytuple = (10, 20, 30)

mytuple[0]
```


---

## Functions for tuples

There are two functions available only:

- `index` to find the occurrence of a value
  
- `count` to count the number of occurrences of a value


---

### Tuples in dictionaries

```python
my_protected_dictionary = dict([('jan', 1), ('feb', 2), ('march', 3)])

my_protected_dictionary['febâ€™]
2
```

Often tuples are used as keys to dictionaries

Tuples are useful because they are

- are faster than lists

- protect the data from change


---

## Tuple unpacking

```python
data  = (1,2,3)

x, y, z = data
```

. . .

Slicing is similar to lists

```python
my_tuple = (1, 2, 3, 4, 5)

print(mytuple[2:])
  
(3, 4, 5)
```


---


## Working with tuples

```python
tuplex = (4, 6, 2, 8, 3, 1)
```

Since tuples are immutable we can not add new elements

tuple merge, with the + operator, can add elements and create a new tuple

```python
# notice the extra ','
tuplex = tuplex + (9,)

print(tuplex)
```

---


Another workaround

```python
tuplex = (4, 6, 2, 8, 3, 1)

listx = list(tuplex)

#Add an item in the list
listx.append(30)

#Make the list tuplex
tuplex = tuple(listx)
```


---

## The `count()` method


```python
tuplex = (2, 4, 5, 6, 2, 3, 4, 4, 7)

# find the np. of times it appears in the tuple:
count = tuplex.count(4)
```


---

## Comparison, a

![](./imgs/garnd-comparison-1.png)



---

## Comparison, b

![](./imgs/garnd-comparison-2.png)

