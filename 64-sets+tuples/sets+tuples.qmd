---
title: "Learn Web"
author: "ale66"
format: 
  revealjs:
    footer: "[github.com/ale66/learn-web](https://github.com/ale66/learn-web)&nbsp;&nbsp;&nbsp;"
    theme: [moon]
    preview-links: auto
    chalkboard: 
      boardmarker-width: 3
    mermaid:
      theme: forest
      fontSize: 12
from: markdown+emoji
execute:
  echo: true
---

# Sets

* Sets are constructed from a sequence.
* Sets  __cannot__  have duplicated values
  * There are usually used to build sequence of unique items (e.g., set of identifiers such as IDs etc.).

alist = [“Stelios”, “Tom”, “Tom”, “Stelios”, “Claudia”]

aset = set(alist)

print(list(aset))

# the set includes only the unique elements!

aset = [“Stelios”, “Tom”, “Claudia”]


---


# Sets (cont.)

:::: {.columns}

::: {.column width="33%"}

Ideal when we need to remove duplicated values

Also ideal for doing logic operations

__Duplicates are __

__eliminated__

:::

::: {.column width="33%"}

a = set([1, 2, 3,4])

b = set([3,4,5,6])

a.intersection(b)

# This will  _return_

set([3, 4])

c = a.intersection(b)

c.issubset(a)

# This will  _return_

True

a.issubset(b)

# This will  _return_

False

:::

::: {.column width="33%"}

a.difference(b)

# This will  _return_

set([1,2,5,6])

![](img%5Cdcwp-5-a%2Bb0.tiff)

:::

::::


---


# Sets: Basic operations

Create an empty set

Iterate over a set and print elements

#Create a new empty set

empty_set = set()

#Create a non empty set

aset = set([0, 1, 2, 3, 4])

#Create a set

num_set = set([0, 1, 2, 3, 4, 5])

for element in num_set:

print(element)


---


# Sets: Basic operations cont

Add data to a set

Remove data from a set

color_set = set()	 # alist = list() or alist = []  EMPTY!

color_set.add("Red")

#Add multiple items

color_set.update(["Blue", "Green"])

color_set.pop()

# Will remove the last element


---


# Sets: Basic operations cont (cont.)

:::: {.columns}

::: {.column width="50%"}

Intersection of two sets

Union of two sets

x = set(["green", "blue"])

y = set(["blue", "yellow"])

z  = x & y		# or x.intersection(y)

x = set(["green", "blue"])

y = set(["blue", "yellow"])

z = x | y		# or x.union(y)

:::

::: {.column width="50%"}

”green”,”blue”,”yellow”

:::

::::


---


# Sets: Basic operations cont (cont.)

Len of a set (similar to lists)

x = set(["green", "blue"])

# len(x) -> will print 2


---


# Quiz 2!

:::: {.columns}

::: {.column width="33%"}

* Sets allow duplicated values:
  * True or False?
* Sets have no order in data:
  * True or False?
* Sets do no support indexing:
  * True or False?

:::

::: {.column width="33%"}

:::

::: {.column width="33%"}

![](img%5Cdcwp-5-a%2Bb1.png)

:::

::::


---


# Quiz Solutions!

* Sets allow duplicated values:
  * False
* Sets have no order in data:
  * True
* Sets do no support indexing:
  * True


---


# Facts about Sets

:::: {.columns}

::: {.column width="50%"}

__Duplicates are __

__eliminated__

__SETS have __

__no order__

:::

::: {.column width="50%"}

SETS do not  __Support __  __indexing__

__SETS are ideal __  __For __  __Boolean__  __ __  __operations__

:::

::::


---


# Quiz 3!

:::: {.columns}

::: {.column width="33%"}

![](img%5Cdcwp-5-a%2Bb2.png)

:::

::: {.column width="33%"}

Will it print True or False?

:::

::: {.column width="33%"}

x = set([“Agatha Christie ", “J.R.R Tolkien"])

y = set(["J.R.R Tolkien ", “Virginia Woolf"])

z = set([" J.R.R Tolkien "])

__issubset1 = x.__ issubset __(y)__

print(issubset1)

__issuperset2 = y. issuperset(x)__

print(issuperset2)

__issubset3 = z.__ issubset __(y)__

print(issubset3)

__issuperset4= y.issuperset(z)__

print(issuperset4)

:::

::::


---


# Quiz 3 Solutions!

:::: {.columns}

::: {.column width="50%"}

The outputs of the print statements are True or False?

:::

::: {.column width="50%"}

x = set([“Agatha Christie ", “J.R.R Tolkien"])

y = set(["J.R.R Tolkien ", “Virginia Woolf"])

z = set([" J.R.R Tolkien "])

__issubset1 = x <= y__

print(issubset1) # This will print False

__issuperset2 = x >= y__

print(issuperset2) # This will print False

__issubset3 = z <= y__

print(issubset3) # This will print True

__issuperset4 = y >= z__

print(issuperset4) # This will print True

:::

::::


---


# More Python data structures

* Tuples:
  * A data structure very similar to the  __list__  data structure.
  * The main difference being that tuple manipulation are faster than list because tuples are
    * __IMMUTABLE__

mytuple = (10, 20, 30)

mytuple[0]

#Will print

mytuple = (10, 20, 30)


---


# Tuples

:::: {.columns}

::: {.column width="50%"}

* Tuples are optimised!
  * This makes them very simple.
  * There are two functions available only:
    * _index_  _, to find the occurrence of a value_
    * _count, _  _to count the number of occurrences of a value_

my_protected_dictionary = dict([('jan', 1), ('feb', 2), ('march', 3)])

my_protected_dictionary['feb’]

__# This will print 2!__

__# The keys are immutable!__

:::

::: {.column width="50%"}

* Tuples are useful because there are
  * _faster than lists_
  * _protect the data_  _, which is immutable_
  * _tuples can be used as keys on dictionaries_

:::

::::


---


# Tuples: Useful hints

* Tuple unpacking:
* data  = (1,2,3)
* x, y, z = data
* # x is 1, y – 2 (will be 0)etc.
* __len(data) __
  * Will print 3
* Slicing works similar to lists
* t = (1,2,3,4,5)
* t[2:]
* (3, 4, 5)


---


# Working with tuples

tuplex = (4, 6, 2, 8, 3, 1)

print(tuplex)

#tuples are  __immutable__ !, so you can not add new elements

#using merge of tuples with the + operator you can add an element and it will create a new tuple

tuplex = tuplex + (9,)

print(tuplex)


---


# Working with tuples (cont.)

tuplex = (4, 6, 2, 8, 3, 1)

listx = list(tuplex)

#Add an item in the list

listx.append(30)

#Make the list tuplex

tuplex = tuple(listx)


---


# Working with tuples (cont.)

tuplex = (2, 4, 5, 6, 2, 3, 4, 4, 7)

#return the number of times it appears in the tuple.

count = tuplex.count(4)

# This will print 3!


---


# Working with tuples (cont.)

#Convert list to tuple

listx = [5, 10, 7, 4, 15, 3]

#use the tuple() function built-in Python, passing as parameter the list

tuplex = tuple(listx)


---


