---
title: "Learn Coding"
author: "ale66"
format: 
  revealjs:
    footer: "[github.com/ale66/learn-coding](https://github.com/ale66/learn-coding)&nbsp;&nbsp;&nbsp;"
    theme: [moon]
    preview-links: auto
    chalkboard: 
      boardmarker-width: 5
from: markdown+emoji
execute:
  echo: true
---

# Loops


---

## The ``While`` instruction

We saw ``for`` to *iterate* over a sequence

A block of code is executed as many times as the number of elements of the sequence

```python
writers = ['Hemingway', 'Dickens', 'King']

for w in writers:
  print(f)
```


---

__With the while loop we execute a block only as long as a given expression is true_ 

```python
i = 1
while i < 6:
  print(i)
  i += 1
``` 

increment is not automatic

the expression is evaluated *before* executing the block of code

Try the example above on [pythontutor.com](https://pythontutor.com/)


---


With the break statement we can stop the loop even if the while condition is true:

```python
i = 1
while i < 6:
  if i == 3:
    break
  i += 1
``` 


---

## Indefinite loops

Would execute forever, or until a break condition is met

```python
while True:
  
  command = input(''Please enter a command, type 'exit' to stop.'')
  
  if command == 'exit':
    break
  else:
    # implement commands here ..
``` 


---

What is this code doing?

```python
n = 5

while n > 0 :

      print(n)

      n = n-1   # or n -= 1

print('Blastoff!')
```


# Quiz: What's wrong with this loop?

![](./imgs/timer.gif)


```python
n = 1

while n > 0 :

      print(“Hi”)

print(“End”)
```


# Indefinite loops

---

- some ``while`` loops are called *indefinitE* because they keep going until a logical condition becomes False

- but will it ever happen?
  
- codes seen so far are easy to examine to see whether they will terminate or become  *infinite*

- termination analysis is about checking, *before running it,* that our code will always reach the final nstruction and control will be back to the operating system

- this activity cannot be automated


# ``for`` vs. ``while``

---

Use ``for`` to automate work over collections, here represented by iterables 

in principle, all elements will be examined


Use ``while`` to search for a specific element: it stops as soon as it's found

Also use ``while`` or to act *conditionally* and stop as soon as the condition is not true anymore



# ``while`` in lists

```python
alist = [1, 3, 7, 9]

count = 0 # also works as index

while(True):
      print(alist[count])

      if count == len(alist)-1:
          print("end")
          break

      count += 1
```

. . .

```python
for anum in alist:
        print(anum)
```

