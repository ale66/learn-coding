---
title: 'Learn Coding'
author: 'ale66'
format: 
  revealjs:
    footer: '[github.com/ale66/learn-coding](https://github.com/ale66/learn-coding)&nbsp;&nbsp;&nbsp;'
    theme: [moon]
    preview-links: auto
    chalkboard: 
      boardmarker-width: 2
from: markdown+emoji
execute:
  echo: true
---

---

## Pandas

::::{.columns}
::: {.column width="60%"}

- Created by Wes McKinney, a 'quant' for hedge-fund AQR.

- a library for processing tabular data, both numeric and time series.

- it provides data structures (series, dataframe) and methods for data analysis.
:::

::: {.column width="40%"}
W. McKinney, __Python for Data Analysis__, 3/e. O'Reilly 2022.

![](./imgs/book-cover.jpg)
:::
::::

```bash
pip install pandas
```


# Data Structures - Series


---

## Series

A one-dimensional object containing values and associated labels, called Index. 

Unless we assign indices, Pandas will simply enumerate the items.

```{python}
import numpy as np
import pandas as pd
```

```{python}
# a simple series
s1 = pd.Series([10, 20, 30, 40])

s1
```

-----

```{python}
# Assign explicit indices to our data
s2 = pd.Series([10, 20, 30, 40], index = ['a', 'b', 'c', 'd'])

s2
```

```{python}
# Alternatively, convert a Py. dictionary into a DataFrame: 
# keys correspond to indices.
d1 = {'a':10, 'b':20, 'c':30, 'd':40}

s3 = pd.Series(d1)

s3
```

## Series, cont'd

Use the index to select one or more specific values.

```{python}
# Get the data on position 'a' of s3

s3['a']

```

```{python}
# Get the data indexed 'a' and 'c' of s3

s3[['a', 'c']]
```

Filter elements
```{python}
# Get the data smaller than 25

s3[s3<25]

```

---

apply element-wise mathematical operations...

```{python}
# Square every element of s3

s3**2

```

or a combination of both:

```{python}
# Square every element of s3 smaller than 25

s3[s3<25]**2

```

# Data Structures - DataFrames


---

## Dataframes

2D structures where values are labelled by their index and column location.

```{python}
# Notice how we specify columns.
new_df = pd.DataFrame([10, 20, 30, 40], 
                      columns = ['Integers'], 
                      index = ['a', 'b', 'c', 'd'])
new_df
```

---

```{python}
# Implicitly add a column.
new_df['Floats'] = (1.5, 2.5, 3.5, 4.5)

new_df
```

## Data Structures: DataFrame - `loc`

Select data according to their location label.

```{python}
# here loc slices data using index name.

new_df.loc['c'] 
```

```{python}
# here loc slices data using column name.

new_df.loc[:, 'Integers'] #or new_df['numbers']
```

```{python}
# here we use both index and column name.

new_df.loc['c', 'Integers'] 
```

## Data Structures: DataFrame - `iloc`

Select a specific slice of data according to its position.


```{python}
# here loc slices data using index number.
new_df.iloc[2] 
```

```{python}
# here loc slices data using column number.
new_df.iloc[:, 0] 
```

```{python}
# here we use both index and column number.
new_df.iloc[2, 0] 
```


---

## Data Structures: DataFrame - filters

Complex selection is achieved applying Boolean filters.
Multiple conditions can be combined in one statement.

```{python}

new_df[new_df['Integers']>10]

```


---

```{python}
# here we apply conditions to both columns.

new_df[(new_df.Integers>10) & (new_df.Floats>2.5)] 

```


---

## Data Structures: DataFrame - `Axis`

DataFrames operate on 2 dimensions.

`Axis = 0` invokes functions across rows

default behaviour when the axis is not specified.

```{python}
new_df.sum() 
```

`Axis = 1` invokes functions across columns.

```{python}
new_df.sum(axis=1) 
```


---

We can mix element-wise operations with axis functions

Example: Create a column with the sum of squares of each row.

```{python}
# Just one line of code!
new_df['Sumsq'] = (new_df**2).sum(axis=1) 
new_df
```


# From Numpy to Pandas


---

## From Numpy to Pandas: `where()`

Pandas executes `where()` differently

Numpy allows specifying the respective action associated to `True` and `False`

```{python}
l = np.arange(9).reshape((3, 3))
l
```

```{python}
#  If True then make it double, else halve it
np.where(l<5, l*2, l/2)
```

Pandas assigns `n/a` when `False` 

---

## Numpy func. to Pandas objects

```{python}
# l is a Numpy matrix which readily interoperates with Pandas
my_df = pd.DataFrame(l, columns=['A', 'B', 'C'])

my_df
```

```{python}
# Extract the square root of each el. of column B (NB: my_df remains unchanged)
np.sqrt(my_df.B) 
```


---

## Back and Forth b/w Pandas and Numpy

```{python}
# Extract the values back into a Numpy object
m = my_df.values
m
```


# Importing data


---

Read a datafile and turn it into a DataFrame. 
Several arguments are available to specify the behavior of the process:

`index_col` sets the column of the csv file to be used as index of the DataFrame

`sep` specifies the separator in the source file

`parse_dates` sets the cols. to be converted into *datetimes*

```python
FILE = './path/to/some_file.csv'

df_r = pd.read_csv(FILE, 
                    index_col = 0, 
                    sep = ';',
                    parse_dates = ['date'] )
```

## Biostats data - `info()`

The `info()` method outputs top-down information on the DataFrame

```{python}
MYDATA = 'data/biostats.csv'

df_bio = pd.read_csv(MYDATA)

df_bio.info()
```


---

## Biostats data - `head()` and `tail()`

Handy visualisation of first/last n rows (default = 5)  

```{python}

df_bio.head()
```

---

```{python}

df_bio.tail()
```

---

## Biostats data - index column  

Selecting the index column affects the structure of the DataFrame and thus information retrieval.

__Caution:__ the index does not have to be unique. Multiple rows could have the same index name.

```{python}
# here we set the Name column as the index
df_bio2 = pd.read_csv(MYDATA, index_col = 0)

df_bio2.head(2)
```

---

```{python}

#It is now possible to use elements of the Name column to select an entire row
df_bio2.loc['Bert']
```

---

## Descriptive stats - `describe()`

```{python}
# Compute the descriptive stats of quantitative variables
df_bio.describe() 
```


---

Also on selections:

```{python}
# Descriptive statistics for the Age variable
df_bio['Age'].describe()
```

---

## Descriptive stats - categorical vars

The `value_counts()` method computes the unique values and how many times they occur.

```{python}
# Descriptive statistics for the entire DataFrame
df_bio.Sex.value_counts()
```


# Pandas data displays

---

Pandas objects come with methods for visualisation

they are built on top of matplotlib

```{python}
df_bio['Age'].plot(kind = 'hist')

# alternative syntax:
# df_bio.Age.plot(kind = 'hist')
```

